[
  {"id":"blue-green","term":"Blue-Green Deployment","definition":"Run two production environments (blue/green) and switch traffic to the new (green) after validation for instant rollback.","tags":["deploy","strategy"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"canary","term":"Canary Release","definition":"Gradually send a small percent of traffic to a new version to validate before full rollout.","tags":["deploy","strategy"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"rolling-maxsurge","term":"Rolling Update (maxSurge/maxUnavailable)","definition":"Controls how many extra/new Pods can start and how many can be down during updates.","tags":["deploy"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"readiness-gates","term":"Readiness Gates","definition":"Custom conditions that gate Pod readiness beyond standard probes (e.g., external checks).","tags":["reliability"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"pdb-evictions","term":"Pod Disruption Budget (PDB)","definition":"Limits voluntary disruptions so a minimum number or percent of Pods stay available.","tags":["reliability"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"drain","term":"Node Drain","definition":"Safely evicts Pods from a node for maintenance, respecting PDBs and Pod priorities.","tags":["ops","scheduling"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"taints-tolerations","term":"Taints & Tolerations","definition":"Taints repel Pods from nodes unless Pods have matching tolerations to allow scheduling.","tags":["scheduling"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"affinity-anti","term":"Affinity / Anti-Affinity","definition":"Rules to co-locate related Pods or spread them apart for HA and performance.","tags":["scheduling","ha"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"topology-spread","term":"Topology Spread Constraints","definition":"Distribute Pods evenly across failure domains (zones/nodes) to reduce blast radius.","tags":["scheduling","ha"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"priority-preemption","term":"Pod Priority & Preemption","definition":"High-priority Pods can preempt lower-priority ones when resources are scarce.","tags":["scheduling","policy"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"initcontainers","term":"Init Containers","definition":"One-time setup containers that run before app containers, guaranteeing order and success.","tags":["pods","lifecycle"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"sidecar","term":"Sidecar Pattern","definition":"Helper container in the same Pod that augments the main container (e.g., logging, proxy).","tags":["pattern","pods"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"hpa-vpa-ca","term":"HPA vs VPA vs Cluster Autoscaler","definition":"HPA scales Pod replicas; VPA tunes Pod resources; Cluster Autoscaler adds/removes nodes.","tags":["scaling"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"resource-overcommit","term":"Resource Overcommit","definition":"Requests < limits allow packing Pods efficiently, but risk throttling if limits too low.","tags":["resources","scheduling"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"config-reload","term":"Config Reload","definition":"Trigger app reloads when ConfigMaps/Secrets change (sidecar reloader or SIGHUP patterns).","tags":["config","ops"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"secret-management","term":"Secret Management","definition":"Mount secrets as env or files; rotate regularly; consider external vaults for stronger controls.","tags":["security","config"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"network-policy-zero","term":"Default Deny NetworkPolicy","definition":"Start with deny-all, then explicitly allow required pod-to-pod and namespace traffic.","tags":["security","network"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"ingress-strategy","term":"Ingress Strategy","definition":"Use path/host rules, TLS termination, and separate ingress classes/controllers per boundary.","tags":["network","ingress"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"statefulset-scale","term":"StatefulSet Scaling","definition":"Scale carefully; preserve identity and storage; use ordered updates and readiness gates.","tags":["stateful","workload"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"storage-reclaim","term":"PV Reclaim Policy","definition":"Controls what happens to storage when PVC is deleted (Retain, Delete, Recycle).","tags":["storage","policy"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"snapshot","term":"Volume Snapshot","definition":"CSI snapshots capture point-in-time copies of volumes for backup and restore.","tags":["storage","csi"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"helm-strategy","term":"Helm Strategy","definition":"Use values files per environment, versioned charts, and tested rollbacks for safe releases.","tags":["helm","deploy"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"operator-lifecycle","term":"Operator Lifecycle","definition":"Operators automate complex app lifecycle (backups, upgrades) via CRDs and controllers.","tags":["operators","extensibility"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"service-mesh-scenarios","term":"Service Mesh Scenarios","definition":"Use sidecars for mTLS, traffic shifting (canary), retries, timeouts, and observability.","tags":["mesh","network"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"debugging","term":"Debugging Pods","definition":"Use kubectl exec/logs/describe/events and ephemeral debug containers to troubleshoot.","tags":["ops","debug"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"},
  {"id":"multi-tenancy","term":"Multi-Tenancy Controls","definition":"Isolate with namespaces, quotas, limit ranges, RBAC, NetworkPolicies, and Pod Security.","tags":["security","policy"],"source":"/notes/DevOps/Kubernetes/03-advanced-scenarios.md"}
]


