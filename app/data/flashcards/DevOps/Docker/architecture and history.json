[
  {"id":"docker","term":"Docker","definition":"A platform (2013) for building, sharing, and running containers using a standard image format and tooling.","tags":["docker","history"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"container","term":"Container","definition":"An isolated process with its own filesystem, network, and resources, created from an image and sharing the host kernel.","tags":["core"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"image","term":"Image","definition":"A read-only, layered filesystem snapshot packaged with metadata used to create containers.","tags":["core","image"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"image-layer","term":"Image Layer","definition":"An immutable filesystem diff. Layers stack to form an image and are shared across images/containers.","tags":["image","layers"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"overlay2","term":"Overlay2 (Union FS)","definition":"A union filesystem driver that presents stacked read-only layers plus a writable container layer as one view.","tags":["storage","layers"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"dockerfile","term":"Dockerfile","definition":"A declarative build recipe that defines base image and steps to produce an image using cached layers.","tags":["build","image"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"engine","term":"Docker Engine","definition":"Docker’s runtime platform: CLI, dockerd, and container runtime (containerd + runc).","tags":["engine","architecture"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"dockerd","term":"Docker Daemon (dockerd)","definition":"Background service that exposes the Docker API and manages images, containers, networks, and volumes.","tags":["engine","daemon"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"docker-cli","term":"Docker CLI","definition":"Command-line client that calls the Docker API (via dockerd) to build, run, and manage containers.","tags":["cli","engine"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"containerd","term":"containerd","definition":"Industry-standard container runtime that supervises image management and container lifecycle for dockerd/Kubernetes.","tags":["runtime","engine"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"runc","term":"runc","definition":"Low-level OCI-compliant runtime that creates Linux containers using namespaces and cgroups.","tags":["runtime","oci"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"namespaces","term":"Linux Namespaces","definition":"Kernel feature that isolates process views (PID, network, mount, UTS, IPC, user).","tags":["kernel","isolation"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"cgroups","term":"cgroups","definition":"Kernel feature that limits and accounts CPU, memory, I/O, and other resources per group of processes.","tags":["kernel","isolation"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"pid-namespace","term":"PID Namespace","definition":"Isolates process IDs so a container sees only its own processes.","tags":["namespaces"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"net-namespace","term":"Network Namespace","definition":"Gives a container its own network stack (interfaces, routes, iptables) isolated from the host and other containers.","tags":["namespaces","networking"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"bridge-network","term":"Bridge Network","definition":"Default local network; containers get private IPs and can reach each other; host access via port mappings.","tags":["networking"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"host-network","term":"Host Network","definition":"Container shares host network stack (no isolation); higher performance, fewer knobs, security trade-offs.","tags":["networking"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"none-network","term":"None Network","definition":"Disables networking; container has only loopback for maximum isolation.","tags":["networking"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"port-mapping","term":"Port Mapping","definition":"NAT rule that exposes a container port on a host port (e.g., -p 8080:80).","tags":["networking","cli"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"volume","term":"Volume","definition":"Docker-managed persistent data stored outside a container’s writable layer; shareable across containers.","tags":["storage"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"bind-mount","term":"Bind Mount","definition":"Maps a host path into a container; great for local dev, couples container to host filesystem.","tags":["storage"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"tmpfs","term":"tmpfs Mount","definition":"In-memory filesystem mounted in a container; very fast and ephemeral.","tags":["storage","performance"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"registry","term":"Registry","definition":"Service that stores and serves images (push/pull). Examples: Docker Hub, ECR, GCR, ACR.","tags":["registry","distribution"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"docker-hub","term":"Docker Hub","definition":"Docker’s default public registry and image catalog with automated builds and discovery.","tags":["registry"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"repo-tag","term":"Repository & Tag","definition":"Image name (repo) plus tag identifies a specific image version (e.g., nginx:1.25).","tags":["image","versioning"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"base-image","term":"Base Image","definition":"Starting image layer your Dockerfile builds from (e.g., ubuntu:22.04 or python:3.11-slim).","tags":["image","build"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"oci","term":"Open Container Initiative (OCI)","definition":"Standards for image format and runtime, ensuring portability across tools (Docker, containerd, CRI-O).","tags":["oci","standards"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"lxc","term":"LXC","definition":"Early Linux container tech using namespaces/cgroups; Docker initially built on LXC before libcontainer.","tags":["history","runtime"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"},
  {"id":"libcontainer","term":"libcontainer","definition":"Docker’s Go library (2014) to manage containers without LXC; basis for runc and OCI work.","tags":["history","runtime"],"source":"/notes/DevOps/Docker/00-architecture-and-history.md"}
]


